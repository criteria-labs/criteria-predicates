/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* Root := OptionalSpace predicate=Predicate OptionalSpace $
* Predicate := compound=CompoundPredicate | comparison=ComparisonPredicate | '\(' OptionalSpace group=Predicate OptionalSpace '\)' | 'TRUE' | 'FALSE'
* CompoundPredicate := lhs=Predicate Space 'AND' Space rhs=Predicate | lhs=Predicate Space 'OR' Space rhs=Predicate | 'NOT' Space base=Predicate
* ComparisonPredicate := lhs=Expression Space operator=ComparisonOperator Space rhs=Expression | modifier=AggregateQualifier Space comparison=ComparisonPredicate
* ComparisonOperator := '=' | '!=' | 'CONTAINS' | 'IN' | '>' | '>=' | '<' | '<='
* AggregateQualifier := 'ANY' | 'ALL'
* Expression := '\(' OptionalSpace group=Expression OptionalSpace '\)' | index=IndexExpression | property=PropertyExpression | value=ValueExpression | conditional=ConditionalExpression | subquery=SubqueryExpression
* IndexExpression := base=Expression OptionalSpace '\[' OptionalSpace index={'FIRST' | 'LAST' | 'SIZE'} OptionalSpace '\]'
* PropertyExpression := base={ value=Expression OptionalSpace '\.' OptionalSpace }? propertyName=Identifier
* ValueExpression := StringValueExpression | NumericValueExpression | VariableExpression | 'NULL' | 'TRUE' | 'FALSE' | ObjectLiteralExpression | ArrayLiteralExpression
* StringValueExpression := '"' firstSegment=StringValueExpressionLiteralSegment? remainingSegments={ templateSegment=StringValueExpressionTemplateSegment literalSegment=StringValueExpressionLiteralSegment? }* '"' 
* StringValueExpressionLiteralSegment := literal='([^"$\\]|\\"|\\\$|\\\\)*'
* StringValueExpressionTemplateSegment := '\$\{' OptionalSpace template=Expression OptionalSpace '\}' 
* NumericValueExpression := integer='(0|[1-9][0-9]*)' | float='(0|[1-9][0-9]*)(\.[0-9]+)'
* VariableExpression := '\$' identifier=Identifier
* ObjectLiteralExpression := '\{' OptionalSpace properties={ first=ObjectLiteralExpressionProperty remaining={ OptionalSpace ',' OptionalSpace property=ObjectLiteralExpressionProperty }* OptionalSpace }? '\}'
* ObjectLiteralExpressionProperty := key=Identifier OptionalSpace ':' OptionalSpace value=Expression
* ArrayLiteralExpression := '\[' OptionalSpace elements={ first=Expression remaining={ OptionalSpace ',' OptionalSpace element=Expression }* OptionalSpace }? '\]'
* ConditionalExpression := 'TERNARY' OptionalSpace '\(' OptionalSpace test=Predicate OptionalSpace ',' OptionalSpace trueBranch=Expression OptionalSpace ',' OptionalSpace falseBranch=Expression OptionalSpace '\)'
* SubqueryExpression := 'SUBQUERY' OptionalSpace '\(' OptionalSpace collection=Expression OptionalSpace ',' OptionalSpace variable=VariableExpression OptionalSpace ',' OptionalSpace filter=Predicate OptionalSpace '\)'
* Identifier := !ReservedWord value='[_a-zA-Z@][_a-zA-Z0-9/]*' | '#' value=ReservedWord
* ReservedWord := 'AND' | 'OR' | 'IN' | 'NOT' | 'ALL' | 'ANY' | 'SOME' | 'NONE' | 'LIKE' | 'CASEINSENSITIVE' | 'CI' | 'MATCHES' | 'CONTAINS' | 'BEGINSWITH' | 'ENDSWITH' | 'BETWEEN' | 'NULL' | 'NIL' | 'SELF' | 'TRUE' | 'YES' | 'FALSE' | 'NO' | 'FIRST' | 'LAST' | 'SIZE' | 'ANYKEY' | 'SUBQUERY' | 'FETCH' | 'CAST' | 'TRUE' | 'FALSEPREDICATE' | 'UTI-CONFORMS-TO' | 'UTI-EQUALS' | 'TERNARY'
* Space := '\s+'
* OptionalSpace := '\s*'
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    Root = "Root",
    Predicate_1 = "Predicate_1",
    Predicate_2 = "Predicate_2",
    Predicate_3 = "Predicate_3",
    Predicate_4 = "Predicate_4",
    Predicate_5 = "Predicate_5",
    CompoundPredicate_1 = "CompoundPredicate_1",
    CompoundPredicate_2 = "CompoundPredicate_2",
    CompoundPredicate_3 = "CompoundPredicate_3",
    ComparisonPredicate_1 = "ComparisonPredicate_1",
    ComparisonPredicate_2 = "ComparisonPredicate_2",
    ComparisonOperator_1 = "ComparisonOperator_1",
    ComparisonOperator_2 = "ComparisonOperator_2",
    ComparisonOperator_3 = "ComparisonOperator_3",
    ComparisonOperator_4 = "ComparisonOperator_4",
    ComparisonOperator_5 = "ComparisonOperator_5",
    ComparisonOperator_6 = "ComparisonOperator_6",
    ComparisonOperator_7 = "ComparisonOperator_7",
    ComparisonOperator_8 = "ComparisonOperator_8",
    AggregateQualifier_1 = "AggregateQualifier_1",
    AggregateQualifier_2 = "AggregateQualifier_2",
    Expression_1 = "Expression_1",
    Expression_2 = "Expression_2",
    Expression_3 = "Expression_3",
    Expression_4 = "Expression_4",
    Expression_5 = "Expression_5",
    Expression_6 = "Expression_6",
    IndexExpression = "IndexExpression",
    IndexExpression_$0_1 = "IndexExpression_$0_1",
    IndexExpression_$0_2 = "IndexExpression_$0_2",
    IndexExpression_$0_3 = "IndexExpression_$0_3",
    PropertyExpression = "PropertyExpression",
    PropertyExpression_$0 = "PropertyExpression_$0",
    ValueExpression_1 = "ValueExpression_1",
    ValueExpression_2 = "ValueExpression_2",
    ValueExpression_3 = "ValueExpression_3",
    ValueExpression_4 = "ValueExpression_4",
    ValueExpression_5 = "ValueExpression_5",
    ValueExpression_6 = "ValueExpression_6",
    ValueExpression_7 = "ValueExpression_7",
    ValueExpression_8 = "ValueExpression_8",
    StringValueExpression = "StringValueExpression",
    StringValueExpression_$0 = "StringValueExpression_$0",
    StringValueExpressionLiteralSegment = "StringValueExpressionLiteralSegment",
    StringValueExpressionTemplateSegment = "StringValueExpressionTemplateSegment",
    NumericValueExpression_1 = "NumericValueExpression_1",
    NumericValueExpression_2 = "NumericValueExpression_2",
    VariableExpression = "VariableExpression",
    ObjectLiteralExpression = "ObjectLiteralExpression",
    ObjectLiteralExpression_$0 = "ObjectLiteralExpression_$0",
    ObjectLiteralExpression_$0_$0 = "ObjectLiteralExpression_$0_$0",
    ObjectLiteralExpressionProperty = "ObjectLiteralExpressionProperty",
    ArrayLiteralExpression = "ArrayLiteralExpression",
    ArrayLiteralExpression_$0 = "ArrayLiteralExpression_$0",
    ArrayLiteralExpression_$0_$0 = "ArrayLiteralExpression_$0_$0",
    ConditionalExpression = "ConditionalExpression",
    SubqueryExpression = "SubqueryExpression",
    Identifier_1 = "Identifier_1",
    Identifier_2 = "Identifier_2",
    ReservedWord_1 = "ReservedWord_1",
    ReservedWord_2 = "ReservedWord_2",
    ReservedWord_3 = "ReservedWord_3",
    ReservedWord_4 = "ReservedWord_4",
    ReservedWord_5 = "ReservedWord_5",
    ReservedWord_6 = "ReservedWord_6",
    ReservedWord_7 = "ReservedWord_7",
    ReservedWord_8 = "ReservedWord_8",
    ReservedWord_9 = "ReservedWord_9",
    ReservedWord_10 = "ReservedWord_10",
    ReservedWord_11 = "ReservedWord_11",
    ReservedWord_12 = "ReservedWord_12",
    ReservedWord_13 = "ReservedWord_13",
    ReservedWord_14 = "ReservedWord_14",
    ReservedWord_15 = "ReservedWord_15",
    ReservedWord_16 = "ReservedWord_16",
    ReservedWord_17 = "ReservedWord_17",
    ReservedWord_18 = "ReservedWord_18",
    ReservedWord_19 = "ReservedWord_19",
    ReservedWord_20 = "ReservedWord_20",
    ReservedWord_21 = "ReservedWord_21",
    ReservedWord_22 = "ReservedWord_22",
    ReservedWord_23 = "ReservedWord_23",
    ReservedWord_24 = "ReservedWord_24",
    ReservedWord_25 = "ReservedWord_25",
    ReservedWord_26 = "ReservedWord_26",
    ReservedWord_27 = "ReservedWord_27",
    ReservedWord_28 = "ReservedWord_28",
    ReservedWord_29 = "ReservedWord_29",
    ReservedWord_30 = "ReservedWord_30",
    ReservedWord_31 = "ReservedWord_31",
    ReservedWord_32 = "ReservedWord_32",
    ReservedWord_33 = "ReservedWord_33",
    ReservedWord_34 = "ReservedWord_34",
    ReservedWord_35 = "ReservedWord_35",
    Space = "Space",
    OptionalSpace = "OptionalSpace",
    $EOF = "$EOF",
}
export interface Root {
    kind: ASTKinds.Root;
    predicate: Predicate;
}
export type Predicate = Predicate_1 | Predicate_2 | Predicate_3 | Predicate_4 | Predicate_5;
export interface Predicate_1 {
    kind: ASTKinds.Predicate_1;
    compound: CompoundPredicate;
}
export interface Predicate_2 {
    kind: ASTKinds.Predicate_2;
    comparison: ComparisonPredicate;
}
export interface Predicate_3 {
    kind: ASTKinds.Predicate_3;
    group: Predicate;
}
export type Predicate_4 = string;
export type Predicate_5 = string;
export type CompoundPredicate = CompoundPredicate_1 | CompoundPredicate_2 | CompoundPredicate_3;
export interface CompoundPredicate_1 {
    kind: ASTKinds.CompoundPredicate_1;
    lhs: Predicate;
    rhs: Predicate;
}
export interface CompoundPredicate_2 {
    kind: ASTKinds.CompoundPredicate_2;
    lhs: Predicate;
    rhs: Predicate;
}
export interface CompoundPredicate_3 {
    kind: ASTKinds.CompoundPredicate_3;
    base: Predicate;
}
export type ComparisonPredicate = ComparisonPredicate_1 | ComparisonPredicate_2;
export interface ComparisonPredicate_1 {
    kind: ASTKinds.ComparisonPredicate_1;
    lhs: Expression;
    operator: ComparisonOperator;
    rhs: Expression;
}
export interface ComparisonPredicate_2 {
    kind: ASTKinds.ComparisonPredicate_2;
    modifier: AggregateQualifier;
    comparison: ComparisonPredicate;
}
export type ComparisonOperator = ComparisonOperator_1 | ComparisonOperator_2 | ComparisonOperator_3 | ComparisonOperator_4 | ComparisonOperator_5 | ComparisonOperator_6 | ComparisonOperator_7 | ComparisonOperator_8;
export type ComparisonOperator_1 = string;
export type ComparisonOperator_2 = string;
export type ComparisonOperator_3 = string;
export type ComparisonOperator_4 = string;
export type ComparisonOperator_5 = string;
export type ComparisonOperator_6 = string;
export type ComparisonOperator_7 = string;
export type ComparisonOperator_8 = string;
export type AggregateQualifier = AggregateQualifier_1 | AggregateQualifier_2;
export type AggregateQualifier_1 = string;
export type AggregateQualifier_2 = string;
export type Expression = Expression_1 | Expression_2 | Expression_3 | Expression_4 | Expression_5 | Expression_6;
export interface Expression_1 {
    kind: ASTKinds.Expression_1;
    group: Expression;
}
export interface Expression_2 {
    kind: ASTKinds.Expression_2;
    index: IndexExpression;
}
export interface Expression_3 {
    kind: ASTKinds.Expression_3;
    property: PropertyExpression;
}
export interface Expression_4 {
    kind: ASTKinds.Expression_4;
    value: ValueExpression;
}
export interface Expression_5 {
    kind: ASTKinds.Expression_5;
    conditional: ConditionalExpression;
}
export interface Expression_6 {
    kind: ASTKinds.Expression_6;
    subquery: SubqueryExpression;
}
export interface IndexExpression {
    kind: ASTKinds.IndexExpression;
    base: Expression;
    index: IndexExpression_$0;
}
export type IndexExpression_$0 = IndexExpression_$0_1 | IndexExpression_$0_2 | IndexExpression_$0_3;
export type IndexExpression_$0_1 = string;
export type IndexExpression_$0_2 = string;
export type IndexExpression_$0_3 = string;
export interface PropertyExpression {
    kind: ASTKinds.PropertyExpression;
    base: Nullable<PropertyExpression_$0>;
    propertyName: Identifier;
}
export interface PropertyExpression_$0 {
    kind: ASTKinds.PropertyExpression_$0;
    value: Expression;
}
export type ValueExpression = ValueExpression_1 | ValueExpression_2 | ValueExpression_3 | ValueExpression_4 | ValueExpression_5 | ValueExpression_6 | ValueExpression_7 | ValueExpression_8;
export type ValueExpression_1 = StringValueExpression;
export type ValueExpression_2 = NumericValueExpression;
export type ValueExpression_3 = VariableExpression;
export type ValueExpression_4 = string;
export type ValueExpression_5 = string;
export type ValueExpression_6 = string;
export type ValueExpression_7 = ObjectLiteralExpression;
export type ValueExpression_8 = ArrayLiteralExpression;
export interface StringValueExpression {
    kind: ASTKinds.StringValueExpression;
    firstSegment: Nullable<StringValueExpressionLiteralSegment>;
    remainingSegments: StringValueExpression_$0[];
}
export interface StringValueExpression_$0 {
    kind: ASTKinds.StringValueExpression_$0;
    templateSegment: StringValueExpressionTemplateSegment;
    literalSegment: Nullable<StringValueExpressionLiteralSegment>;
}
export interface StringValueExpressionLiteralSegment {
    kind: ASTKinds.StringValueExpressionLiteralSegment;
    literal: string;
}
export interface StringValueExpressionTemplateSegment {
    kind: ASTKinds.StringValueExpressionTemplateSegment;
    template: Expression;
}
export type NumericValueExpression = NumericValueExpression_1 | NumericValueExpression_2;
export interface NumericValueExpression_1 {
    kind: ASTKinds.NumericValueExpression_1;
    integer: string;
}
export interface NumericValueExpression_2 {
    kind: ASTKinds.NumericValueExpression_2;
    float: string;
}
export interface VariableExpression {
    kind: ASTKinds.VariableExpression;
    identifier: Identifier;
}
export interface ObjectLiteralExpression {
    kind: ASTKinds.ObjectLiteralExpression;
    properties: Nullable<ObjectLiteralExpression_$0>;
}
export interface ObjectLiteralExpression_$0 {
    kind: ASTKinds.ObjectLiteralExpression_$0;
    first: ObjectLiteralExpressionProperty;
    remaining: ObjectLiteralExpression_$0_$0[];
}
export interface ObjectLiteralExpression_$0_$0 {
    kind: ASTKinds.ObjectLiteralExpression_$0_$0;
    property: ObjectLiteralExpressionProperty;
}
export interface ObjectLiteralExpressionProperty {
    kind: ASTKinds.ObjectLiteralExpressionProperty;
    key: Identifier;
    value: Expression;
}
export interface ArrayLiteralExpression {
    kind: ASTKinds.ArrayLiteralExpression;
    elements: Nullable<ArrayLiteralExpression_$0>;
}
export interface ArrayLiteralExpression_$0 {
    kind: ASTKinds.ArrayLiteralExpression_$0;
    first: Expression;
    remaining: ArrayLiteralExpression_$0_$0[];
}
export interface ArrayLiteralExpression_$0_$0 {
    kind: ASTKinds.ArrayLiteralExpression_$0_$0;
    element: Expression;
}
export interface ConditionalExpression {
    kind: ASTKinds.ConditionalExpression;
    test: Predicate;
    trueBranch: Expression;
    falseBranch: Expression;
}
export interface SubqueryExpression {
    kind: ASTKinds.SubqueryExpression;
    collection: Expression;
    variable: VariableExpression;
    filter: Predicate;
}
export type Identifier = Identifier_1 | Identifier_2;
export interface Identifier_1 {
    kind: ASTKinds.Identifier_1;
    value: string;
}
export interface Identifier_2 {
    kind: ASTKinds.Identifier_2;
    value: ReservedWord;
}
export type ReservedWord = ReservedWord_1 | ReservedWord_2 | ReservedWord_3 | ReservedWord_4 | ReservedWord_5 | ReservedWord_6 | ReservedWord_7 | ReservedWord_8 | ReservedWord_9 | ReservedWord_10 | ReservedWord_11 | ReservedWord_12 | ReservedWord_13 | ReservedWord_14 | ReservedWord_15 | ReservedWord_16 | ReservedWord_17 | ReservedWord_18 | ReservedWord_19 | ReservedWord_20 | ReservedWord_21 | ReservedWord_22 | ReservedWord_23 | ReservedWord_24 | ReservedWord_25 | ReservedWord_26 | ReservedWord_27 | ReservedWord_28 | ReservedWord_29 | ReservedWord_30 | ReservedWord_31 | ReservedWord_32 | ReservedWord_33 | ReservedWord_34 | ReservedWord_35;
export type ReservedWord_1 = string;
export type ReservedWord_2 = string;
export type ReservedWord_3 = string;
export type ReservedWord_4 = string;
export type ReservedWord_5 = string;
export type ReservedWord_6 = string;
export type ReservedWord_7 = string;
export type ReservedWord_8 = string;
export type ReservedWord_9 = string;
export type ReservedWord_10 = string;
export type ReservedWord_11 = string;
export type ReservedWord_12 = string;
export type ReservedWord_13 = string;
export type ReservedWord_14 = string;
export type ReservedWord_15 = string;
export type ReservedWord_16 = string;
export type ReservedWord_17 = string;
export type ReservedWord_18 = string;
export type ReservedWord_19 = string;
export type ReservedWord_20 = string;
export type ReservedWord_21 = string;
export type ReservedWord_22 = string;
export type ReservedWord_23 = string;
export type ReservedWord_24 = string;
export type ReservedWord_25 = string;
export type ReservedWord_26 = string;
export type ReservedWord_27 = string;
export type ReservedWord_28 = string;
export type ReservedWord_29 = string;
export type ReservedWord_30 = string;
export type ReservedWord_31 = string;
export type ReservedWord_32 = string;
export type ReservedWord_33 = string;
export type ReservedWord_34 = string;
export type ReservedWord_35 = string;
export type Space = string;
export type OptionalSpace = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
        this.$scope$Predicate$memo.clear();
        this.$scope$Expression$memo.clear();
    }
    protected $scope$Predicate$memo: Map<number, [Nullable<Predicate>, PosInfo]> = new Map();
    protected $scope$Expression$memo: Map<number, [Nullable<Expression>, PosInfo]> = new Map();
    public matchRoot($$dpth: number, $$cr?: ErrorTracker): Nullable<Root> {
        return this.run<Root>($$dpth,
            () => {
                let $scope$predicate: Nullable<Predicate>;
                let $$res: Nullable<Root> = null;
                if (true
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && ($scope$predicate = this.matchPredicate($$dpth + 1, $$cr)) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Root, predicate: $scope$predicate};
                }
                return $$res;
            });
    }
    public matchPredicate($$dpth: number, $$cr?: ErrorTracker): Nullable<Predicate> {
        const fn = () => {
            return this.choice<Predicate>([
                () => this.matchPredicate_1($$dpth + 1, $$cr),
                () => this.matchPredicate_2($$dpth + 1, $$cr),
                () => this.matchPredicate_3($$dpth + 1, $$cr),
                () => this.matchPredicate_4($$dpth + 1, $$cr),
                () => this.matchPredicate_5($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$Predicate$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$Predicate$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<Predicate> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$Predicate$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchPredicate_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Predicate_1> {
        return this.run<Predicate_1>($$dpth,
            () => {
                let $scope$compound: Nullable<CompoundPredicate>;
                let $$res: Nullable<Predicate_1> = null;
                if (true
                    && ($scope$compound = this.matchCompoundPredicate($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Predicate_1, compound: $scope$compound};
                }
                return $$res;
            });
    }
    public matchPredicate_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Predicate_2> {
        return this.run<Predicate_2>($$dpth,
            () => {
                let $scope$comparison: Nullable<ComparisonPredicate>;
                let $$res: Nullable<Predicate_2> = null;
                if (true
                    && ($scope$comparison = this.matchComparisonPredicate($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Predicate_2, comparison: $scope$comparison};
                }
                return $$res;
            });
    }
    public matchPredicate_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Predicate_3> {
        return this.run<Predicate_3>($$dpth,
            () => {
                let $scope$group: Nullable<Predicate>;
                let $$res: Nullable<Predicate_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && ($scope$group = this.matchPredicate($$dpth + 1, $$cr)) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Predicate_3, group: $scope$group};
                }
                return $$res;
            });
    }
    public matchPredicate_4($$dpth: number, $$cr?: ErrorTracker): Nullable<Predicate_4> {
        return this.regexAccept(String.raw`(?:TRUE)`, "", $$dpth + 1, $$cr);
    }
    public matchPredicate_5($$dpth: number, $$cr?: ErrorTracker): Nullable<Predicate_5> {
        return this.regexAccept(String.raw`(?:FALSE)`, "", $$dpth + 1, $$cr);
    }
    public matchCompoundPredicate($$dpth: number, $$cr?: ErrorTracker): Nullable<CompoundPredicate> {
        return this.choice<CompoundPredicate>([
            () => this.matchCompoundPredicate_1($$dpth + 1, $$cr),
            () => this.matchCompoundPredicate_2($$dpth + 1, $$cr),
            () => this.matchCompoundPredicate_3($$dpth + 1, $$cr),
        ]);
    }
    public matchCompoundPredicate_1($$dpth: number, $$cr?: ErrorTracker): Nullable<CompoundPredicate_1> {
        return this.run<CompoundPredicate_1>($$dpth,
            () => {
                let $scope$lhs: Nullable<Predicate>;
                let $scope$rhs: Nullable<Predicate>;
                let $$res: Nullable<CompoundPredicate_1> = null;
                if (true
                    && ($scope$lhs = this.matchPredicate($$dpth + 1, $$cr)) !== null
                    && this.matchSpace($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:AND)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchSpace($$dpth + 1, $$cr) !== null
                    && ($scope$rhs = this.matchPredicate($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.CompoundPredicate_1, lhs: $scope$lhs, rhs: $scope$rhs};
                }
                return $$res;
            });
    }
    public matchCompoundPredicate_2($$dpth: number, $$cr?: ErrorTracker): Nullable<CompoundPredicate_2> {
        return this.run<CompoundPredicate_2>($$dpth,
            () => {
                let $scope$lhs: Nullable<Predicate>;
                let $scope$rhs: Nullable<Predicate>;
                let $$res: Nullable<CompoundPredicate_2> = null;
                if (true
                    && ($scope$lhs = this.matchPredicate($$dpth + 1, $$cr)) !== null
                    && this.matchSpace($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:OR)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchSpace($$dpth + 1, $$cr) !== null
                    && ($scope$rhs = this.matchPredicate($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.CompoundPredicate_2, lhs: $scope$lhs, rhs: $scope$rhs};
                }
                return $$res;
            });
    }
    public matchCompoundPredicate_3($$dpth: number, $$cr?: ErrorTracker): Nullable<CompoundPredicate_3> {
        return this.run<CompoundPredicate_3>($$dpth,
            () => {
                let $scope$base: Nullable<Predicate>;
                let $$res: Nullable<CompoundPredicate_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:NOT)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchSpace($$dpth + 1, $$cr) !== null
                    && ($scope$base = this.matchPredicate($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.CompoundPredicate_3, base: $scope$base};
                }
                return $$res;
            });
    }
    public matchComparisonPredicate($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparisonPredicate> {
        return this.choice<ComparisonPredicate>([
            () => this.matchComparisonPredicate_1($$dpth + 1, $$cr),
            () => this.matchComparisonPredicate_2($$dpth + 1, $$cr),
        ]);
    }
    public matchComparisonPredicate_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparisonPredicate_1> {
        return this.run<ComparisonPredicate_1>($$dpth,
            () => {
                let $scope$lhs: Nullable<Expression>;
                let $scope$operator: Nullable<ComparisonOperator>;
                let $scope$rhs: Nullable<Expression>;
                let $$res: Nullable<ComparisonPredicate_1> = null;
                if (true
                    && ($scope$lhs = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && this.matchSpace($$dpth + 1, $$cr) !== null
                    && ($scope$operator = this.matchComparisonOperator($$dpth + 1, $$cr)) !== null
                    && this.matchSpace($$dpth + 1, $$cr) !== null
                    && ($scope$rhs = this.matchExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ComparisonPredicate_1, lhs: $scope$lhs, operator: $scope$operator, rhs: $scope$rhs};
                }
                return $$res;
            });
    }
    public matchComparisonPredicate_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparisonPredicate_2> {
        return this.run<ComparisonPredicate_2>($$dpth,
            () => {
                let $scope$modifier: Nullable<AggregateQualifier>;
                let $scope$comparison: Nullable<ComparisonPredicate>;
                let $$res: Nullable<ComparisonPredicate_2> = null;
                if (true
                    && ($scope$modifier = this.matchAggregateQualifier($$dpth + 1, $$cr)) !== null
                    && this.matchSpace($$dpth + 1, $$cr) !== null
                    && ($scope$comparison = this.matchComparisonPredicate($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ComparisonPredicate_2, modifier: $scope$modifier, comparison: $scope$comparison};
                }
                return $$res;
            });
    }
    public matchComparisonOperator($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparisonOperator> {
        return this.choice<ComparisonOperator>([
            () => this.matchComparisonOperator_1($$dpth + 1, $$cr),
            () => this.matchComparisonOperator_2($$dpth + 1, $$cr),
            () => this.matchComparisonOperator_3($$dpth + 1, $$cr),
            () => this.matchComparisonOperator_4($$dpth + 1, $$cr),
            () => this.matchComparisonOperator_5($$dpth + 1, $$cr),
            () => this.matchComparisonOperator_6($$dpth + 1, $$cr),
            () => this.matchComparisonOperator_7($$dpth + 1, $$cr),
            () => this.matchComparisonOperator_8($$dpth + 1, $$cr),
        ]);
    }
    public matchComparisonOperator_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparisonOperator_1> {
        return this.regexAccept(String.raw`(?:=)`, "", $$dpth + 1, $$cr);
    }
    public matchComparisonOperator_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparisonOperator_2> {
        return this.regexAccept(String.raw`(?:!=)`, "", $$dpth + 1, $$cr);
    }
    public matchComparisonOperator_3($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparisonOperator_3> {
        return this.regexAccept(String.raw`(?:CONTAINS)`, "", $$dpth + 1, $$cr);
    }
    public matchComparisonOperator_4($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparisonOperator_4> {
        return this.regexAccept(String.raw`(?:IN)`, "", $$dpth + 1, $$cr);
    }
    public matchComparisonOperator_5($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparisonOperator_5> {
        return this.regexAccept(String.raw`(?:>)`, "", $$dpth + 1, $$cr);
    }
    public matchComparisonOperator_6($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparisonOperator_6> {
        return this.regexAccept(String.raw`(?:>=)`, "", $$dpth + 1, $$cr);
    }
    public matchComparisonOperator_7($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparisonOperator_7> {
        return this.regexAccept(String.raw`(?:<)`, "", $$dpth + 1, $$cr);
    }
    public matchComparisonOperator_8($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparisonOperator_8> {
        return this.regexAccept(String.raw`(?:<=)`, "", $$dpth + 1, $$cr);
    }
    public matchAggregateQualifier($$dpth: number, $$cr?: ErrorTracker): Nullable<AggregateQualifier> {
        return this.choice<AggregateQualifier>([
            () => this.matchAggregateQualifier_1($$dpth + 1, $$cr),
            () => this.matchAggregateQualifier_2($$dpth + 1, $$cr),
        ]);
    }
    public matchAggregateQualifier_1($$dpth: number, $$cr?: ErrorTracker): Nullable<AggregateQualifier_1> {
        return this.regexAccept(String.raw`(?:ANY)`, "", $$dpth + 1, $$cr);
    }
    public matchAggregateQualifier_2($$dpth: number, $$cr?: ErrorTracker): Nullable<AggregateQualifier_2> {
        return this.regexAccept(String.raw`(?:ALL)`, "", $$dpth + 1, $$cr);
    }
    public matchExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<Expression> {
        const fn = () => {
            return this.choice<Expression>([
                () => this.matchExpression_1($$dpth + 1, $$cr),
                () => this.matchExpression_2($$dpth + 1, $$cr),
                () => this.matchExpression_3($$dpth + 1, $$cr),
                () => this.matchExpression_4($$dpth + 1, $$cr),
                () => this.matchExpression_5($$dpth + 1, $$cr),
                () => this.matchExpression_6($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$Expression$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$Expression$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<Expression> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$Expression$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchExpression_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Expression_1> {
        return this.run<Expression_1>($$dpth,
            () => {
                let $scope$group: Nullable<Expression>;
                let $$res: Nullable<Expression_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && ($scope$group = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Expression_1, group: $scope$group};
                }
                return $$res;
            });
    }
    public matchExpression_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Expression_2> {
        return this.run<Expression_2>($$dpth,
            () => {
                let $scope$index: Nullable<IndexExpression>;
                let $$res: Nullable<Expression_2> = null;
                if (true
                    && ($scope$index = this.matchIndexExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Expression_2, index: $scope$index};
                }
                return $$res;
            });
    }
    public matchExpression_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Expression_3> {
        return this.run<Expression_3>($$dpth,
            () => {
                let $scope$property: Nullable<PropertyExpression>;
                let $$res: Nullable<Expression_3> = null;
                if (true
                    && ($scope$property = this.matchPropertyExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Expression_3, property: $scope$property};
                }
                return $$res;
            });
    }
    public matchExpression_4($$dpth: number, $$cr?: ErrorTracker): Nullable<Expression_4> {
        return this.run<Expression_4>($$dpth,
            () => {
                let $scope$value: Nullable<ValueExpression>;
                let $$res: Nullable<Expression_4> = null;
                if (true
                    && ($scope$value = this.matchValueExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Expression_4, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchExpression_5($$dpth: number, $$cr?: ErrorTracker): Nullable<Expression_5> {
        return this.run<Expression_5>($$dpth,
            () => {
                let $scope$conditional: Nullable<ConditionalExpression>;
                let $$res: Nullable<Expression_5> = null;
                if (true
                    && ($scope$conditional = this.matchConditionalExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Expression_5, conditional: $scope$conditional};
                }
                return $$res;
            });
    }
    public matchExpression_6($$dpth: number, $$cr?: ErrorTracker): Nullable<Expression_6> {
        return this.run<Expression_6>($$dpth,
            () => {
                let $scope$subquery: Nullable<SubqueryExpression>;
                let $$res: Nullable<Expression_6> = null;
                if (true
                    && ($scope$subquery = this.matchSubqueryExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Expression_6, subquery: $scope$subquery};
                }
                return $$res;
            });
    }
    public matchIndexExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<IndexExpression> {
        return this.run<IndexExpression>($$dpth,
            () => {
                let $scope$base: Nullable<Expression>;
                let $scope$index: Nullable<IndexExpression_$0>;
                let $$res: Nullable<IndexExpression> = null;
                if (true
                    && ($scope$base = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\[)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && ($scope$index = this.matchIndexExpression_$0($$dpth + 1, $$cr)) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\])`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.IndexExpression, base: $scope$base, index: $scope$index};
                }
                return $$res;
            });
    }
    public matchIndexExpression_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<IndexExpression_$0> {
        return this.choice<IndexExpression_$0>([
            () => this.matchIndexExpression_$0_1($$dpth + 1, $$cr),
            () => this.matchIndexExpression_$0_2($$dpth + 1, $$cr),
            () => this.matchIndexExpression_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchIndexExpression_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<IndexExpression_$0_1> {
        return this.regexAccept(String.raw`(?:FIRST)`, "", $$dpth + 1, $$cr);
    }
    public matchIndexExpression_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<IndexExpression_$0_2> {
        return this.regexAccept(String.raw`(?:LAST)`, "", $$dpth + 1, $$cr);
    }
    public matchIndexExpression_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<IndexExpression_$0_3> {
        return this.regexAccept(String.raw`(?:SIZE)`, "", $$dpth + 1, $$cr);
    }
    public matchPropertyExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<PropertyExpression> {
        return this.run<PropertyExpression>($$dpth,
            () => {
                let $scope$base: Nullable<Nullable<PropertyExpression_$0>>;
                let $scope$propertyName: Nullable<Identifier>;
                let $$res: Nullable<PropertyExpression> = null;
                if (true
                    && (($scope$base = this.matchPropertyExpression_$0($$dpth + 1, $$cr)) || true)
                    && ($scope$propertyName = this.matchIdentifier($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.PropertyExpression, base: $scope$base, propertyName: $scope$propertyName};
                }
                return $$res;
            });
    }
    public matchPropertyExpression_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<PropertyExpression_$0> {
        return this.run<PropertyExpression_$0>($$dpth,
            () => {
                let $scope$value: Nullable<Expression>;
                let $$res: Nullable<PropertyExpression_$0> = null;
                if (true
                    && ($scope$value = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\.)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.PropertyExpression_$0, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchValueExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<ValueExpression> {
        return this.choice<ValueExpression>([
            () => this.matchValueExpression_1($$dpth + 1, $$cr),
            () => this.matchValueExpression_2($$dpth + 1, $$cr),
            () => this.matchValueExpression_3($$dpth + 1, $$cr),
            () => this.matchValueExpression_4($$dpth + 1, $$cr),
            () => this.matchValueExpression_5($$dpth + 1, $$cr),
            () => this.matchValueExpression_6($$dpth + 1, $$cr),
            () => this.matchValueExpression_7($$dpth + 1, $$cr),
            () => this.matchValueExpression_8($$dpth + 1, $$cr),
        ]);
    }
    public matchValueExpression_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ValueExpression_1> {
        return this.matchStringValueExpression($$dpth + 1, $$cr);
    }
    public matchValueExpression_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ValueExpression_2> {
        return this.matchNumericValueExpression($$dpth + 1, $$cr);
    }
    public matchValueExpression_3($$dpth: number, $$cr?: ErrorTracker): Nullable<ValueExpression_3> {
        return this.matchVariableExpression($$dpth + 1, $$cr);
    }
    public matchValueExpression_4($$dpth: number, $$cr?: ErrorTracker): Nullable<ValueExpression_4> {
        return this.regexAccept(String.raw`(?:NULL)`, "", $$dpth + 1, $$cr);
    }
    public matchValueExpression_5($$dpth: number, $$cr?: ErrorTracker): Nullable<ValueExpression_5> {
        return this.regexAccept(String.raw`(?:TRUE)`, "", $$dpth + 1, $$cr);
    }
    public matchValueExpression_6($$dpth: number, $$cr?: ErrorTracker): Nullable<ValueExpression_6> {
        return this.regexAccept(String.raw`(?:FALSE)`, "", $$dpth + 1, $$cr);
    }
    public matchValueExpression_7($$dpth: number, $$cr?: ErrorTracker): Nullable<ValueExpression_7> {
        return this.matchObjectLiteralExpression($$dpth + 1, $$cr);
    }
    public matchValueExpression_8($$dpth: number, $$cr?: ErrorTracker): Nullable<ValueExpression_8> {
        return this.matchArrayLiteralExpression($$dpth + 1, $$cr);
    }
    public matchStringValueExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<StringValueExpression> {
        return this.run<StringValueExpression>($$dpth,
            () => {
                let $scope$firstSegment: Nullable<Nullable<StringValueExpressionLiteralSegment>>;
                let $scope$remainingSegments: Nullable<StringValueExpression_$0[]>;
                let $$res: Nullable<StringValueExpression> = null;
                if (true
                    && this.regexAccept(String.raw`(?:")`, "", $$dpth + 1, $$cr) !== null
                    && (($scope$firstSegment = this.matchStringValueExpressionLiteralSegment($$dpth + 1, $$cr)) || true)
                    && ($scope$remainingSegments = this.loop<StringValueExpression_$0>(() => this.matchStringValueExpression_$0($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.regexAccept(String.raw`(?:")`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.StringValueExpression, firstSegment: $scope$firstSegment, remainingSegments: $scope$remainingSegments};
                }
                return $$res;
            });
    }
    public matchStringValueExpression_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<StringValueExpression_$0> {
        return this.run<StringValueExpression_$0>($$dpth,
            () => {
                let $scope$templateSegment: Nullable<StringValueExpressionTemplateSegment>;
                let $scope$literalSegment: Nullable<Nullable<StringValueExpressionLiteralSegment>>;
                let $$res: Nullable<StringValueExpression_$0> = null;
                if (true
                    && ($scope$templateSegment = this.matchStringValueExpressionTemplateSegment($$dpth + 1, $$cr)) !== null
                    && (($scope$literalSegment = this.matchStringValueExpressionLiteralSegment($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.StringValueExpression_$0, templateSegment: $scope$templateSegment, literalSegment: $scope$literalSegment};
                }
                return $$res;
            });
    }
    public matchStringValueExpressionLiteralSegment($$dpth: number, $$cr?: ErrorTracker): Nullable<StringValueExpressionLiteralSegment> {
        return this.run<StringValueExpressionLiteralSegment>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<StringValueExpressionLiteralSegment> = null;
                if (true
                    && ($scope$literal = this.regexAccept(String.raw`(?:([^"$\\]|\\"|\\\$|\\\\)*)`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.StringValueExpressionLiteralSegment, literal: $scope$literal};
                }
                return $$res;
            });
    }
    public matchStringValueExpressionTemplateSegment($$dpth: number, $$cr?: ErrorTracker): Nullable<StringValueExpressionTemplateSegment> {
        return this.run<StringValueExpressionTemplateSegment>($$dpth,
            () => {
                let $scope$template: Nullable<Expression>;
                let $$res: Nullable<StringValueExpressionTemplateSegment> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\$\{)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && ($scope$template = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\})`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.StringValueExpressionTemplateSegment, template: $scope$template};
                }
                return $$res;
            });
    }
    public matchNumericValueExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<NumericValueExpression> {
        return this.choice<NumericValueExpression>([
            () => this.matchNumericValueExpression_1($$dpth + 1, $$cr),
            () => this.matchNumericValueExpression_2($$dpth + 1, $$cr),
        ]);
    }
    public matchNumericValueExpression_1($$dpth: number, $$cr?: ErrorTracker): Nullable<NumericValueExpression_1> {
        return this.run<NumericValueExpression_1>($$dpth,
            () => {
                let $scope$integer: Nullable<string>;
                let $$res: Nullable<NumericValueExpression_1> = null;
                if (true
                    && ($scope$integer = this.regexAccept(String.raw`(?:(0|[1-9][0-9]*))`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.NumericValueExpression_1, integer: $scope$integer};
                }
                return $$res;
            });
    }
    public matchNumericValueExpression_2($$dpth: number, $$cr?: ErrorTracker): Nullable<NumericValueExpression_2> {
        return this.run<NumericValueExpression_2>($$dpth,
            () => {
                let $scope$float: Nullable<string>;
                let $$res: Nullable<NumericValueExpression_2> = null;
                if (true
                    && ($scope$float = this.regexAccept(String.raw`(?:(0|[1-9][0-9]*)(\.[0-9]+))`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.NumericValueExpression_2, float: $scope$float};
                }
                return $$res;
            });
    }
    public matchVariableExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<VariableExpression> {
        return this.run<VariableExpression>($$dpth,
            () => {
                let $scope$identifier: Nullable<Identifier>;
                let $$res: Nullable<VariableExpression> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\$)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$identifier = this.matchIdentifier($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.VariableExpression, identifier: $scope$identifier};
                }
                return $$res;
            });
    }
    public matchObjectLiteralExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<ObjectLiteralExpression> {
        return this.run<ObjectLiteralExpression>($$dpth,
            () => {
                let $scope$properties: Nullable<Nullable<ObjectLiteralExpression_$0>>;
                let $$res: Nullable<ObjectLiteralExpression> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\{)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && (($scope$properties = this.matchObjectLiteralExpression_$0($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:\})`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ObjectLiteralExpression, properties: $scope$properties};
                }
                return $$res;
            });
    }
    public matchObjectLiteralExpression_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ObjectLiteralExpression_$0> {
        return this.run<ObjectLiteralExpression_$0>($$dpth,
            () => {
                let $scope$first: Nullable<ObjectLiteralExpressionProperty>;
                let $scope$remaining: Nullable<ObjectLiteralExpression_$0_$0[]>;
                let $$res: Nullable<ObjectLiteralExpression_$0> = null;
                if (true
                    && ($scope$first = this.matchObjectLiteralExpressionProperty($$dpth + 1, $$cr)) !== null
                    && ($scope$remaining = this.loop<ObjectLiteralExpression_$0_$0>(() => this.matchObjectLiteralExpression_$0_$0($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ObjectLiteralExpression_$0, first: $scope$first, remaining: $scope$remaining};
                }
                return $$res;
            });
    }
    public matchObjectLiteralExpression_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ObjectLiteralExpression_$0_$0> {
        return this.run<ObjectLiteralExpression_$0_$0>($$dpth,
            () => {
                let $scope$property: Nullable<ObjectLiteralExpressionProperty>;
                let $$res: Nullable<ObjectLiteralExpression_$0_$0> = null;
                if (true
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && ($scope$property = this.matchObjectLiteralExpressionProperty($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ObjectLiteralExpression_$0_$0, property: $scope$property};
                }
                return $$res;
            });
    }
    public matchObjectLiteralExpressionProperty($$dpth: number, $$cr?: ErrorTracker): Nullable<ObjectLiteralExpressionProperty> {
        return this.run<ObjectLiteralExpressionProperty>($$dpth,
            () => {
                let $scope$key: Nullable<Identifier>;
                let $scope$value: Nullable<Expression>;
                let $$res: Nullable<ObjectLiteralExpressionProperty> = null;
                if (true
                    && ($scope$key = this.matchIdentifier($$dpth + 1, $$cr)) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ObjectLiteralExpressionProperty, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchArrayLiteralExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<ArrayLiteralExpression> {
        return this.run<ArrayLiteralExpression>($$dpth,
            () => {
                let $scope$elements: Nullable<Nullable<ArrayLiteralExpression_$0>>;
                let $$res: Nullable<ArrayLiteralExpression> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\[)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && (($scope$elements = this.matchArrayLiteralExpression_$0($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:\])`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ArrayLiteralExpression, elements: $scope$elements};
                }
                return $$res;
            });
    }
    public matchArrayLiteralExpression_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ArrayLiteralExpression_$0> {
        return this.run<ArrayLiteralExpression_$0>($$dpth,
            () => {
                let $scope$first: Nullable<Expression>;
                let $scope$remaining: Nullable<ArrayLiteralExpression_$0_$0[]>;
                let $$res: Nullable<ArrayLiteralExpression_$0> = null;
                if (true
                    && ($scope$first = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && ($scope$remaining = this.loop<ArrayLiteralExpression_$0_$0>(() => this.matchArrayLiteralExpression_$0_$0($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ArrayLiteralExpression_$0, first: $scope$first, remaining: $scope$remaining};
                }
                return $$res;
            });
    }
    public matchArrayLiteralExpression_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ArrayLiteralExpression_$0_$0> {
        return this.run<ArrayLiteralExpression_$0_$0>($$dpth,
            () => {
                let $scope$element: Nullable<Expression>;
                let $$res: Nullable<ArrayLiteralExpression_$0_$0> = null;
                if (true
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && ($scope$element = this.matchExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ArrayLiteralExpression_$0_$0, element: $scope$element};
                }
                return $$res;
            });
    }
    public matchConditionalExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<ConditionalExpression> {
        return this.run<ConditionalExpression>($$dpth,
            () => {
                let $scope$test: Nullable<Predicate>;
                let $scope$trueBranch: Nullable<Expression>;
                let $scope$falseBranch: Nullable<Expression>;
                let $$res: Nullable<ConditionalExpression> = null;
                if (true
                    && this.regexAccept(String.raw`(?:TERNARY)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && ($scope$test = this.matchPredicate($$dpth + 1, $$cr)) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && ($scope$trueBranch = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && ($scope$falseBranch = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ConditionalExpression, test: $scope$test, trueBranch: $scope$trueBranch, falseBranch: $scope$falseBranch};
                }
                return $$res;
            });
    }
    public matchSubqueryExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<SubqueryExpression> {
        return this.run<SubqueryExpression>($$dpth,
            () => {
                let $scope$collection: Nullable<Expression>;
                let $scope$variable: Nullable<VariableExpression>;
                let $scope$filter: Nullable<Predicate>;
                let $$res: Nullable<SubqueryExpression> = null;
                if (true
                    && this.regexAccept(String.raw`(?:SUBQUERY)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && ($scope$collection = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && ($scope$variable = this.matchVariableExpression($$dpth + 1, $$cr)) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && ($scope$filter = this.matchPredicate($$dpth + 1, $$cr)) !== null
                    && this.matchOptionalSpace($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.SubqueryExpression, collection: $scope$collection, variable: $scope$variable, filter: $scope$filter};
                }
                return $$res;
            });
    }
    public matchIdentifier($$dpth: number, $$cr?: ErrorTracker): Nullable<Identifier> {
        return this.choice<Identifier>([
            () => this.matchIdentifier_1($$dpth + 1, $$cr),
            () => this.matchIdentifier_2($$dpth + 1, $$cr),
        ]);
    }
    public matchIdentifier_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Identifier_1> {
        return this.run<Identifier_1>($$dpth,
            () => {
                let $scope$value: Nullable<string>;
                let $$res: Nullable<Identifier_1> = null;
                if (true
                    && this.negate(() => this.matchReservedWord($$dpth + 1, $$cr)) !== null
                    && ($scope$value = this.regexAccept(String.raw`(?:[_a-zA-Z@][_a-zA-Z0-9/]*)`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Identifier_1, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchIdentifier_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Identifier_2> {
        return this.run<Identifier_2>($$dpth,
            () => {
                let $scope$value: Nullable<ReservedWord>;
                let $$res: Nullable<Identifier_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:#)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchReservedWord($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Identifier_2, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchReservedWord($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord> {
        return this.choice<ReservedWord>([
            () => this.matchReservedWord_1($$dpth + 1, $$cr),
            () => this.matchReservedWord_2($$dpth + 1, $$cr),
            () => this.matchReservedWord_3($$dpth + 1, $$cr),
            () => this.matchReservedWord_4($$dpth + 1, $$cr),
            () => this.matchReservedWord_5($$dpth + 1, $$cr),
            () => this.matchReservedWord_6($$dpth + 1, $$cr),
            () => this.matchReservedWord_7($$dpth + 1, $$cr),
            () => this.matchReservedWord_8($$dpth + 1, $$cr),
            () => this.matchReservedWord_9($$dpth + 1, $$cr),
            () => this.matchReservedWord_10($$dpth + 1, $$cr),
            () => this.matchReservedWord_11($$dpth + 1, $$cr),
            () => this.matchReservedWord_12($$dpth + 1, $$cr),
            () => this.matchReservedWord_13($$dpth + 1, $$cr),
            () => this.matchReservedWord_14($$dpth + 1, $$cr),
            () => this.matchReservedWord_15($$dpth + 1, $$cr),
            () => this.matchReservedWord_16($$dpth + 1, $$cr),
            () => this.matchReservedWord_17($$dpth + 1, $$cr),
            () => this.matchReservedWord_18($$dpth + 1, $$cr),
            () => this.matchReservedWord_19($$dpth + 1, $$cr),
            () => this.matchReservedWord_20($$dpth + 1, $$cr),
            () => this.matchReservedWord_21($$dpth + 1, $$cr),
            () => this.matchReservedWord_22($$dpth + 1, $$cr),
            () => this.matchReservedWord_23($$dpth + 1, $$cr),
            () => this.matchReservedWord_24($$dpth + 1, $$cr),
            () => this.matchReservedWord_25($$dpth + 1, $$cr),
            () => this.matchReservedWord_26($$dpth + 1, $$cr),
            () => this.matchReservedWord_27($$dpth + 1, $$cr),
            () => this.matchReservedWord_28($$dpth + 1, $$cr),
            () => this.matchReservedWord_29($$dpth + 1, $$cr),
            () => this.matchReservedWord_30($$dpth + 1, $$cr),
            () => this.matchReservedWord_31($$dpth + 1, $$cr),
            () => this.matchReservedWord_32($$dpth + 1, $$cr),
            () => this.matchReservedWord_33($$dpth + 1, $$cr),
            () => this.matchReservedWord_34($$dpth + 1, $$cr),
            () => this.matchReservedWord_35($$dpth + 1, $$cr),
        ]);
    }
    public matchReservedWord_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_1> {
        return this.regexAccept(String.raw`(?:AND)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_2> {
        return this.regexAccept(String.raw`(?:OR)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_3($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_3> {
        return this.regexAccept(String.raw`(?:IN)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_4($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_4> {
        return this.regexAccept(String.raw`(?:NOT)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_5($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_5> {
        return this.regexAccept(String.raw`(?:ALL)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_6($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_6> {
        return this.regexAccept(String.raw`(?:ANY)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_7($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_7> {
        return this.regexAccept(String.raw`(?:SOME)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_8($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_8> {
        return this.regexAccept(String.raw`(?:NONE)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_9($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_9> {
        return this.regexAccept(String.raw`(?:LIKE)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_10($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_10> {
        return this.regexAccept(String.raw`(?:CASEINSENSITIVE)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_11($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_11> {
        return this.regexAccept(String.raw`(?:CI)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_12($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_12> {
        return this.regexAccept(String.raw`(?:MATCHES)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_13($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_13> {
        return this.regexAccept(String.raw`(?:CONTAINS)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_14($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_14> {
        return this.regexAccept(String.raw`(?:BEGINSWITH)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_15($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_15> {
        return this.regexAccept(String.raw`(?:ENDSWITH)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_16($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_16> {
        return this.regexAccept(String.raw`(?:BETWEEN)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_17($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_17> {
        return this.regexAccept(String.raw`(?:NULL)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_18($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_18> {
        return this.regexAccept(String.raw`(?:NIL)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_19($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_19> {
        return this.regexAccept(String.raw`(?:SELF)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_20($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_20> {
        return this.regexAccept(String.raw`(?:TRUE)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_21($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_21> {
        return this.regexAccept(String.raw`(?:YES)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_22($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_22> {
        return this.regexAccept(String.raw`(?:FALSE)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_23($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_23> {
        return this.regexAccept(String.raw`(?:NO)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_24($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_24> {
        return this.regexAccept(String.raw`(?:FIRST)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_25($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_25> {
        return this.regexAccept(String.raw`(?:LAST)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_26($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_26> {
        return this.regexAccept(String.raw`(?:SIZE)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_27($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_27> {
        return this.regexAccept(String.raw`(?:ANYKEY)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_28($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_28> {
        return this.regexAccept(String.raw`(?:SUBQUERY)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_29($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_29> {
        return this.regexAccept(String.raw`(?:FETCH)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_30($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_30> {
        return this.regexAccept(String.raw`(?:CAST)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_31($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_31> {
        return this.regexAccept(String.raw`(?:TRUE)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_32($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_32> {
        return this.regexAccept(String.raw`(?:FALSEPREDICATE)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_33($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_33> {
        return this.regexAccept(String.raw`(?:UTI-CONFORMS-TO)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_34($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_34> {
        return this.regexAccept(String.raw`(?:UTI-EQUALS)`, "", $$dpth + 1, $$cr);
    }
    public matchReservedWord_35($$dpth: number, $$cr?: ErrorTracker): Nullable<ReservedWord_35> {
        return this.regexAccept(String.raw`(?:TERNARY)`, "", $$dpth + 1, $$cr);
    }
    public matchSpace($$dpth: number, $$cr?: ErrorTracker): Nullable<Space> {
        return this.regexAccept(String.raw`(?:\s+)`, "", $$dpth + 1, $$cr);
    }
    public matchOptionalSpace($$dpth: number, $$cr?: ErrorTracker): Nullable<OptionalSpace> {
        return this.regexAccept(String.raw`(?:\s*)`, "", $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchRoot(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchRoot(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchRoot(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    // @ts-ignore: loopPlus may not be called
    private loopPlus<T>(func: $$RuleType<T>): Nullable<[T, ...T[]]> {
        return this.loop(func, 1, -1) as Nullable<[T, ...T[]]>;
    }
    private loop<T>(func: $$RuleType<T>, lb: number, ub: number): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        while (ub === -1 || res.length < ub) {
            const preMrk = this.mark();
            const t = func();
            if (t === null || this.pos.overallPos === preMrk.overallPos) {
                break;
            }
            res.push(t);
        }
        if (res.length >= lb) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    // @ts-ignore: choice may not be called
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, mods: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y" + mods);
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    // @ts-ignore: noConsume may not be called
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    // @ts-ignore: negate may not be called
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    // @ts-ignore: Memoise may not be used
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<Root>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}